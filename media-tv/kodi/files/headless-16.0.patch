diff --git a/xbmc/AppParamParser.cpp b/xbmc/AppParamParser.cpp
index 14886b5..721aa0f 100644
--- a/xbmc/AppParamParser.cpp
+++ b/xbmc/AppParamParser.cpp
@@ -40,6 +40,7 @@ using namespace KODI::MESSAGING;
 CAppParamParser::CAppParamParser()
 {
   m_testmode = false;
+  m_renderGUI = true;
 }
 
 void CAppParamParser::Parse(const char* argv[], int nArgs)
@@ -109,6 +110,7 @@ void CAppParamParser::DisplayHelp()
   printf("  --test\t\tEnable test mode. [FILE] required.\n");
   printf("  --settings=<filename>\t\tLoads specified file after advancedsettings.xml replacing any settings specified\n");
   printf("  \t\t\t\tspecified file must exist in special://xbmc/system/\n");
+  printf("  --headless\t\tRun XBMC headless, i.e. No GUI.\n");
   exit(0);
 }
 
@@ -137,6 +139,8 @@ void CAppParamParser::ParseArg(const std::string &arg)
     g_application.SetEnableLegacyRes(true);
   else if (arg == "--test")
     m_testmode = true;
+  else if (arg == "--headless")
+    m_renderGUI = false;
   else if (arg.substr(0, 11) == "--settings=")
     g_advancedSettings.AddSettingsFile(arg.substr(11));
   else if (arg.length() != 0 && arg[0] != '-')
@@ -149,6 +153,11 @@ void CAppParamParser::ParseArg(const std::string &arg)
   }
 }
 
+bool CAppParamParser::renderGUI()
+{
+  return(m_renderGUI);
+}
+
 void CAppParamParser::PlayPlaylist()
 {
   if (m_playlist.Size() > 0)
diff --git a/xbmc/AppParamParser.h b/xbmc/AppParamParser.h
index ee88dbf..e57bc97 100644
--- a/xbmc/AppParamParser.h
+++ b/xbmc/AppParamParser.h
@@ -25,9 +25,11 @@ class CAppParamParser
   public:
     CAppParamParser();
     void Parse(const char* argv[], int nArgs);
+    bool renderGUI();
 
   private:
     bool m_testmode;
+    bool m_renderGUI;
     CFileItemList m_playlist;
     void ParseArg(const std::string &arg);
     void DisplayHelp();
diff --git a/xbmc/main/main.cpp b/xbmc/main/main.cpp
index 01027f8..b281b0a 100644
--- a/xbmc/main/main.cpp
+++ b/xbmc/main/main.cpp
@@ -75,6 +75,8 @@ int main(int argc, char* argv[])
 
   CAppParamParser appParamParser;
   appParamParser.Parse(const_cast<const char**>(argv), argc);
+
+  renderGUI = appParamParser.renderGUI();
   
   return XBMC_Run(renderGUI);
 }
